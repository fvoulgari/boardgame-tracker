name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  workflow_dispatch: 

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18.12.1'

      # Frontend Build and Tests
      - name: Install frontend dependencies
        run: |
          cd frontend-service
          npm install

      - name: Build frontend
        run: |
          cd frontend-service
          CI=false npm run build

      - name: Run frontend tests
        run: |
          cd frontend-service
          npm test

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-test  
    if: github.ref == 'refs/heads/main' && github.event_name == 'workflow_dispatch' 

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18.12.1' 

      - name: Install dependencies
        run: |
          cd frontend-service
          npm install

      - name: Build frontend
        run: |
          cd frontend-service
          CI=false npm run build
          
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login --username "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build Docker images
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/frontend-service:latest ./frontend-service
          docker build -t ${{ secrets.DOCKER_USERNAME }}/game-service:latest ./game-service
          docker build -t ${{ secrets.DOCKER_USERNAME }}/session-service:latest ./session-service
          docker build -t ${{ secrets.DOCKER_USERNAME }}/user-service:latest ./user-service

      - name: Push Docker images to Docker Hub
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/frontend-service:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/game-service:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/session-service:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/user-service:latest

      - name: Login to Azure
        run: |
          az login --service-principal -u ${{ secrets.AZURE_CLIENT_ID }} -p ${{ secrets.AZURE_CLIENT_SECRET }} --tenant ${{ secrets.AZURE_TENANT_ID }}

      - name: Set AKS context
        run: |
          az aks get-credentials --resource-group myResourceGroup --name myAKSCluster
      
      - name: Remove existing ConfigMap (if it exists)
        run: |
          kubectl delete configmap nginx-config --ignore-not-found

      - name: Create new ConfigMap from nginx.conf
        run: |
          kubectl create configmap nginx-config --from-file=nginx.conf=./nginx.conf

      - name: Deploy to AKS
        run: |
          kubectl apply -f ./nginx-deployment.yaml
          kubectl apply -f ./nginx-service.yaml
          kubectl apply -f ./game-service-deployment.yaml
          kubectl apply -f ./game-service-service.yaml
          kubectl apply -f ./session-service-deployment.yaml
          kubectl apply -f ./session-service-service.yaml
          kubectl apply -f ./user-service-deployment.yaml
          kubectl apply -f ./user-service-service.yaml
          kubectl apply -f ./react-app-deployment.yaml
          kubectl apply -f ./react-app-service.yaml

      - name: Trigger rolling restart
        run: |
          kubectl rollout restart deployment game-service
          kubectl rollout restart deployment session-service
          kubectl rollout restart deployment user-service
          kubectl rollout restart deployment react-app
          kubectl rollout restart deployment nginx
